"""
Filename: stochmatrix.py

Author: Daisuke Oyama

"""
import numpy as np
from scipy import sparse
from scipy.sparse import csgraph

try:
    xrange
except:  # python3
    xrange = range


class StochMatrix(np.ndarray):
    r"""
    Add structure as a directed graph to numpy.ndarray.

    Parameters
    ----------
    P : array_like(float, ndim=2)
        Stochastic matrix. Must be of shape n x n.

    Attributes
    ----------
    is_irreducible : bool
        Indicate whether P is an irreducible matrix.

    """

    def __new__(subtype, P):
        arr = np.array(P, dtype=float)
        ndim = arr.ndim
        if ndim != 2:
            raise ValueError('matrix must be 2-dimensional')
        n, m = arr.shape
        if n != m:
            raise ValueError('matrix must be square')

        obj = np.ndarray.__new__(subtype, (n, n), dtype=float, buffer=arr)

        obj.P = arr
        obj.n = n

        obj._num_comm_classes = None
        obj._comm_classes_proj = None
        obj._is_irreducible = None
        obj._rec_classes_labels = None

        return obj

    def __array_finalize__(self, obj):
        pass

    def _find_comm_classes(self):
        # Directed graph generated by P, represented by sparse.csr_matrix
        digraph_csr = sparse.csr_matrix(self.P > 0, dtype=bool)

        # Find the communication classes (strongly connected components)
        # docs.scipy.org/doc/scipy/reference/sparse.csgraph.html
        self._num_comm_classes, self._comm_classes_proj = \
            csgraph.connected_components(digraph_csr, connection='strong')

        self._is_irreducible = True if self.num_comm_classes == 1 else False

    @property
    def num_comm_classes(self):
        if self._num_comm_classes is None:
            self._find_comm_classes()
        return self._num_comm_classes

    @property
    def comm_classes_proj(self):
        if self._comm_classes_proj is None:
            self._find_comm_classes()
        return self._comm_classes_proj

    @property
    def is_irreducible(self):
        if self._is_irreducible is None:
            self._find_comm_classes()
        return self._is_irreducible

    def _find_rec_classes(self):
        # Directed graph on the quotient set (the set of communication classes)
        # represented by dictionary of sets
        digraph_quo = {i: set() for i in range(self.num_comm_classes)}

        try:
            # `ValueError` raised if `np.where(self.P > 0)` is zero-sized
            edges_iter = np.nditer(np.where(self.P > 0))
        except ValueError:
            edges_iter = ()

        for edge in edges_iter:
            comm_class_from, comm_class_to = \
                self.comm_classes_proj[np.array(edge)]
            if comm_class_from != comm_class_to:
                digraph_quo[comm_class_from].add(comm_class_to)

        self._rec_classes_labels = \
            [i for i, val in digraph_quo.items() if len(val) == 0]

    @property
    def rec_classes_labels(self):
        if self._rec_classes_labels is None:
            self._find_rec_classes()
        return self._rec_classes_labels

    def comm_classes(self):
        """
        Returns the communication classes (strongly connected components) of P

        Returns
        -------
        list(list(int))
            List of lists containing the communication classes

        """
        if self.is_irreducible:
            return [range(self.n)]
        else:
            return [np.where(self.comm_classes_proj == i)[0].tolist()
                    for i in range(self.num_comm_classes)]

    def rec_classes(self):
        """
        Returns the recurrent classes (closed communication classes) of P

        Returns
        -------
        list(list(int))
            List of lists containing the recurrent classes

        """
        if self.is_irreducible:
            return [range(self.n)]
        else:
            return [np.where(self.comm_classes_proj == i)[0].tolist()
                    for i in self.rec_classes_labels]

    def __repr__(self):
        s = repr(self.__array__()).replace('array', 'StochMatrix')
        # From defmatrix.py in NumPy:
        # now, 'StochMatrix' has 11 letters, and 'array' 5, so the columns don't
        # line up anymore. We need to add 6 spaces.
        l = s.splitlines()
        for i in range(1, len(l)):
            if l[i]:
                l[i] = ' ' * 6 + l[i]
        return '\n'.join(l)


def stationary_dists(P):
    r"""
    This function computes the stationary distributions of P.

    Parameters
    ----------
    P : numpy.ndarray or StochMatrix
        Stochastic matrix. Must be of shape n x n.

    Returns
    -------
    stationary_dists : numpy.ndarray(float, ndim=2)
        Array containing the stationary distributions of P as its rows.

    """
    if not isinstance(P, StochMatrix):
        P = StochMatrix(P)

    n = P.shape[0]

    if P.is_irreducible:
        stationary_dists = gth_solve(P).reshape(1, n)
    else:
        rec_classes = P.rec_classes()
        stationary_dists = np.zeros((len(rec_classes), n))
        for i, rec_class in enumerate(rec_classes):
            stationary_dists[i, rec_class] = \
                gth_solve(P[rec_class, :][:, rec_class])

    return stationary_dists


# From https://github.com/oyamad/numpy_eigen_markov
def gth_solve(A, overwrite=False):
    r"""
    This routine computes the nontrivial solution to `x A = 0` for an
    irreducible transition rate matrix `A`, by using the
    Grassmann-Taksar-Heyman (GTH) algorithm, a numerically stable
    variant of Gaussian elimination. The solution is normalized so that
    its 1-norm equals one.

    In fact, the algorithm employed solves `x B = 0` where
    :math:`B_{ij} = A_{ij}` for :math:`j \neq i` and
    :math:`B_{ii} = \sum_{j \neq i} A_{ij}` (so that `B = A` if `A` is a
    transition rate matrix). Therefore, if `A` is an irreducible
    stochastic matrix, then ``gth_solve(A)`` returns the stationary
    distribution vector of `A`, since in this case `B = A - I` (where
    `I` is the identity matrix) so that the equation actually solved is
    `x (A - I) = 0`, or `x A = x`.

    Parameters
    ----------
    A : array_like(float, ndim=2)
        Transition rate matrix. Must be of shape n x n.
    overwrite : bool, optional(default=False)
        Whether to overwrite A; may improve performance.

    Returns
    -------
    x : numpy.ndarray(float, ndim=1)
        Non-zero solution to x A = 0, normalized so that its 1-norm
        equals one.

    Examples
    --------
    >>> A = np.array([[-0.1, 0.075, 0.025], [0.15, -0.2, 0.05], [0.25, 0.25, -0.5]])
    >>> x = gth_solve(A)
    >>> print x
    [ 0.625   0.3125  0.0625]
    >>> print np.dot(x, A)
    [ 0.  0.  0.]
    >>> P = np.array([[0.9, 0.075, 0.025], [0.15, 0.8, 0.05], [0.25, 0.25, 0.5]])
    >>> y = gth_solve(P)
    >>> print y
    [ 0.625   0.3125  0.0625]
    >>> print np.dot(y, P)
    [ 0.625   0.3125  0.0625]

    """
    A1 = np.array(A, copy=not overwrite)

    n, m = A1.shape

    if n != m:
        raise ValueError('matrix must be square')

    x = np.zeros(n)

    # === Reduction === #
    for i in xrange(n-1):
        scale = np.sum(A1[i, i+1:n])
        if scale <= 0:
            # Only consider the leading principal minor of size i+1,
            # which is irreducible
            n = i+1
            break
        A1[i+1:n, i] /= scale

        for j in xrange(i+1, n):
            A1[i+1:n, j] += A1[i, j] * A1[i+1:n, i]

    # === Backward substitution === #
    x[n-1] = 1
    for i in xrange(n-2, -1, -1):
        x[i] = np.sum((x[j] * A1[j, i] for j in xrange(i+1, n)))

    # === Normalization === #
    x /= np.sum(x)

    return x
